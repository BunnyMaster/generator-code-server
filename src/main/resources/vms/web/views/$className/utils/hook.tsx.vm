import { addDialog } from '@/components/ReDialog/index';
import {h, ref} from 'vue';
import {message, messageBox} from '@/utils/message';
import DeleteBatchDialog from "@/components/RePureTableBar/DeleteBatchDialog.vue";
import { use${classUppercaseName}Store } from '@/store/modules${webBasePath}/${classLowercaseName}';
import ${classUppercaseName}Dialog from '../components/${classLowercaseName}-dialog.vue';
import type { ${classUppercaseName}Info } from '@/types${webBasePath}/${classLowercaseName}/${classLowercaseName}DataType';
import type { FormItemProps } from 'element-plus';
import { messageBoxSecondConfirm } from '@/utils/base/dialog';

export const formRef = ref();
// 删除ids
export const deleteIds = ref([]);
const ${classLowercaseName}Store = use${classUppercaseName}Store();

/** 搜索初始化${comment} */
export async function onSearch() {
        ${classLowercaseName}Store.loading = true;
    await ${classLowercaseName}Store.fetch${classUppercaseName}Page();
        ${classLowercaseName}Store.loading = false;
}

/** 添加${comment} */
export function onAdd() {
    addDialog({
        title: `添加${comment}`,
         props: { formInline: {} },
        draggable: true,
        fullscreenIcon: true,
        closeOnClickModal: false,
        contentRenderer: () => h(${classUppercaseName}Dialog, {ref: formRef}),
        beforeSure: (done, {options}) => {
            const form = options.props.formInline as FormItemProps;
            formRef.value.formRef.validate(async (valid: any) => {
                if (!valid) return;

                const result = await ${classLowercaseName}Store.create${classUppercaseName}(form);
                if (!result) return;
                done();
                await onSearch();
            });
        },
    });
}

/** 更新${comment} */
export function onUpdate(row: any) {
    addDialog({
        title: `修改${comment}`,
        props: { formInline: { ...row } },
        draggable: true,
        fullscreenIcon: true,
        closeOnClickModal: false,
        contentRenderer: () => h(${classUppercaseName}Dialog, {ref: formRef}),
        beforeSure: (done, {options}) => {
            const form = options.props.formInline as FormItemProps;
            formRef.value.formRef.validate(async (valid: any) => {
                if (!valid) return;

                const result = await ${classLowercaseName}Store.update${classUppercaseName}ById({...form, id: row.id});
                if (!result) return;
                done();
                await onSearch();
            });
        },
    });
}

/**
 * 删除用户信息
 * @param ids 要删除的用户ID数组，如果传单个对象会自动提取其id
 *  使用示例：
 *  删除单个: delete${classUppercaseName}s(row)
 *  批量删除: delete${classUppercaseName}s(deleteIds.value)
 */
export const delete${classUppercaseName}s = async (ids: any[] | any) => {
    // 处理参数：如果是单个对象，提取其id；如果是数组，直接使用
    const idArray = Array.isArray(ids) ? ids : [ids?.id];

    const result = await messageBoxSecondConfirm();
    if (!result) return;

    // 删除数据
    await ${classLowercaseName}Store.batchDelete${classUppercaseName}(idArray);
    await onSearch();
};