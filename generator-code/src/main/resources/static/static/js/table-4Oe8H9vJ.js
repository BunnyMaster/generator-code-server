var e=(e,t,a)=>new Promise(((r,s)=>{var o=e=>{try{l(a.next(e))}catch(t){s(t)}},n=e=>{try{l(a.throw(e))}catch(t){s(t)}},l=e=>e.done?r(e.value):Promise.resolve(e.value).then(o,n);l((a=a.apply(e,t)).next())}));import{Z as t,_ as a,C as r}from"./vendor-BkJtItE3.js";const s=t.create({baseURL:"/api",timeout:5e4,headers:{"Content-Type":"application/json;charset=utf-8"},paramsSerializer:e=>a.stringify(e)});s.interceptors.request.use((e=>{const t=localStorage.getItem("accessToken");return t&&(e.headers.Authorization=t),e}),(e=>Promise.reject(e))),s.interceptors.response.use((e=>"blob"===e.config.responseType||"arraybuffer"===e.config.responseType?e:200===e.status?e.data:Promise.reject(e.data.message||"Error")),(e=>(e.response.data,Promise.reject(e.message))));const o=r("tableStore",{state:()=>({tableList:[]}),getters:{},actions:{getAllTableMetaData(){return e(this,null,(function*(){const e=yield s({url:"/table/getAllTableMetaData",method:"get"});200!==e.code&&window.$message.error(e.message),this.tableList=e.data}))},getTableMetaData(t){return e(this,null,(function*(){const e=yield(a={tableName:t},s({url:"/table/getTableMetaData",method:"get",params:a}));var a;return 200!==e.code?(window.$message.error(e.message),{}):e.data}))},getColumnInfo(t){return e(this,null,(function*(){const e=yield(a={tableName:t},s({url:"/table/getColumnInfo",method:"get",params:a}));var a;return 200!==e.code?(window.$message.error(e.message),{}):e.data}))}}});export{s,o as u};
